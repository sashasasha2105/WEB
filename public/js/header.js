// === File: js/header.js ===
// === –≠–õ–ï–ì–ê–ù–¢–ù–´–ô –•–ï–î–ï–† –°–ö–†–ò–ü–¢ ===

class HeaderManager {
    constructor() {
        console.log('[Header] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

        // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω–æ–≤—ã–π –∏ —Å—Ç–∞—Ä—ã–π —Ö–µ–¥–µ—Ä)
        this.header = document.getElementById('premiumHeader') || document.getElementById('site-header');
        this.mobileToggle = document.querySelector('.mobile-menu-toggle') || document.querySelector('.burger-menu');
        this.mobileMenu = document.getElementById('mobileMenu');
        this.mobileClose = document.querySelector('.mobile-close');
        this.mobileBackdrop = document.querySelector('.mobile-menu-backdrop');

        // –ë–µ–π–¥–∂–∏ –∫–æ—Ä–∑–∏–Ω—ã
        this.cartBadges = {
            header: document.getElementById('headerCartBadge'),
            mobile: document.getElementById('mobileCartBadge'),
            old: document.querySelector('.cart-count') // –°—Ç–∞—Ä—ã–π –±–µ–π–¥–∂
        };

        // –ë–µ–π–¥–∂–∏ –∑–∞–∫–∞–∑–æ–≤
        this.ordersBadges = {
            header: document.getElementById('headerOrdersBadge'),
            mobile: document.getElementById('mobileOrdersBadge')
        };

        this.lastScroll = 0;
        this.isMenuOpen = false;
        this.scrollThreshold = 30; // –ö–æ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å–∫—Ä–æ–ª–ª–∞
        this.isScrolling = false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–µ–¥–µ—Ä –Ω–∞–π–¥–µ–Ω
        if (!this.header) {
            console.error('[Header] ‚ùå –•–µ–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —ç–ª–µ–º–µ–Ω—Ç–∞.');
            return;
        }

        this.init();
    }

    init() {
        console.log('[Header] ‚úÖ –ù–∞–π–¥–µ–Ω —Ö–µ–¥–µ—Ä:', this.header.id);

        this.setupScrollHandler();
        this.setupMobileMenu();
        this.setupSmoothScroll();
        this.updateBadges();
        this.setupCartManager();

        // –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞
        this.handleScroll();

        console.log('[Header] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    }

    setupScrollHandler() {
        let ticking = false;

        this.handleScroll = () => {
            if (!ticking) {
                requestAnimationFrame(() => {
                    const currentScroll = window.pageYOffset;

                    // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
                    if (currentScroll > this.scrollThreshold) {
                        if (!this.header.classList.contains('scrolled')) {
                            this.header.classList.add('scrolled');
                        }
                    } else {
                        if (this.header.classList.contains('scrolled')) {
                            this.header.classList.remove('scrolled');
                        }
                    }

                    this.lastScroll = currentScroll;
                    ticking = false;
                });
                ticking = true;
            }
        };

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        window.addEventListener('scroll', this.handleScroll, { passive: true });

        console.log('[Header] üìú Scroll handler –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    setupMobileMenu() {
        if (!this.mobileToggle) {
            console.warn('[Header] ‚ö†Ô∏è –ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
        this.mobileToggle.addEventListener('click', this.toggleMobileMenu.bind(this), { passive: true });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π X
        if (this.mobileClose) {
            this.mobileClose.addEventListener('click', this.closeMobileMenu.bind(this));
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –±—ç–∫–¥—Ä–æ–ø—É
        if (this.mobileBackdrop) {
            this.mobileBackdrop.addEventListener('click', this.closeMobileMenu.bind(this));
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Å—Å—ã–ª–∫—É –≤ –º–µ–Ω—é
        if (this.mobileMenu) {
            this.mobileMenu.addEventListener('click', (e) => {
                if (e.target.matches('a')) {
                    setTimeout(() => this.closeMobileMenu(), 200);
                }
            });

            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ–Ω—é
            const mobileContent = this.mobileMenu.querySelector('.mobile-menu-content');
            if (mobileContent) {
                mobileContent.addEventListener('click', (e) => e.stopPropagation());
            }
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isMenuOpen) {
                this.closeMobileMenu();
            }
        }, { passive: true });

        console.log('[Header] üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }

    toggleMobileMenu() {
        this.isMenuOpen = !this.isMenuOpen;

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –±—É—Ä–≥–µ—Ä
        this.mobileToggle?.classList.toggle('active', this.isMenuOpen);

        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
        this.mobileMenu?.classList.toggle('active', this.isMenuOpen);

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
        if (this.isMenuOpen) {
            const scrollY = window.scrollY;
            document.body.style.overflow = 'hidden';
            document.body.style.position = 'fixed';
            document.body.style.width = '100%';
            document.body.style.top = `-${scrollY}px`;
        } else {
            const scrollY = document.body.style.top;
            document.body.style.overflow = '';
            document.body.style.position = '';
            document.body.style.width = '';
            document.body.style.top = '';
            if (scrollY) {
                window.scrollTo(0, parseInt(scrollY) * -1);
            }
        }

        // Haptic feedback –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if ('vibrate' in navigator && this.isMenuOpen) {
            navigator.vibrate(30);
        }

        console.log(`[Header] üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é ${this.isMenuOpen ? '–æ—Ç–∫—Ä—ã—Ç–æ' : '–∑–∞–∫—Ä—ã—Ç–æ'}`);
    }

    closeMobileMenu() {
        if (!this.isMenuOpen) return;

        this.isMenuOpen = false;

        // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
        this.mobileToggle?.classList.remove('active');

        // –°–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
        this.mobileMenu?.classList.remove('active');

        // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
        const scrollY = document.body.style.top;
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';
        document.body.style.top = '';
        if (scrollY) {
            window.scrollTo(0, parseInt(scrollY) * -1);
        }

        console.log('[Header] üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ');
    }

    setupSmoothScroll() {
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        const anchorLinks = document.querySelectorAll('a[data-section], a[href*="#"]');

        anchorLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                const href = link.getAttribute('href');
                let sectionId = link.getAttribute('data-section');

                // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ–∫—Ü–∏–∏ –∏–∑ href –µ—Å–ª–∏ data-section –Ω–µ –∑–∞–¥–∞–Ω
                if (!sectionId && href && href.includes('#')) {
                    sectionId = href.split('#')[1];
                }

                if (sectionId) {
                    const targetElement = document.getElementById(sectionId);

                    if (targetElement) {
                        e.preventDefault();

                        const headerHeight = this.header.offsetHeight || 75;
                        const targetPosition = targetElement.offsetTop - headerHeight - 20;

                        window.scrollTo({
                            top: Math.max(0, targetPosition),
                            behavior: 'smooth'
                        });

                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ
                        if (this.isMenuOpen) {
                            setTimeout(() => this.closeMobileMenu(), 100);
                        }

                        console.log(`[Header] üéØ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–µ–∫—Ü–∏–∏: ${sectionId}`);
                    }
                }
            }, { passive: false });
        });

        console.log(`[Header] üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è ${anchorLinks.length} —Å—Å—ã–ª–æ–∫`);
    }

    updateBadges() {
        try {
            const cartCount = this.getCartCount();
            const ordersCount = this.getOrdersCount();

            this.setBadge(this.cartBadges, cartCount);
            this.setBadge(this.ordersBadges, ordersCount);

            console.log(`[Header] üîÑ –ë–µ–π–¥–∂–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –ö–æ—Ä–∑–∏–Ω–∞ ${cartCount}, –ó–∞–∫–∞–∑—ã ${ordersCount}`);
        } catch (error) {
            console.error('[Header] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–π–¥–∂–µ–π:', error);
        }
    }

    setBadge(badges, count) {
        Object.values(badges).forEach(badge => {
            if (badge) {
                badge.textContent = count;

                if (count > 0) {
                    badge.style.display = 'flex';
                    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
                    badge.style.animation = 'none';
                    badge.offsetHeight; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow
                    badge.style.animation = 'badgeEntry 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
                } else {
                    badge.style.display = 'none';
                }
            }
        });
    }

    getCartCount() {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: CartManager > localStorage > 0
        if (window.CartManager && typeof window.CartManager.getTotalCount === 'function') {
            return window.CartManager.getTotalCount();
        }

        // Fallback –∫ localStorage
        try {
            const cartData = JSON.parse(localStorage.getItem('cartData') || '{}');
            return (cartData.cameraCount || 0) + (cartData.memoryCount || 0);
        } catch (e) {
            console.warn('[Header] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cartData:', e);
            return 0;
        }
    }

    getOrdersCount() {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: OrderManager > localStorage > 0
        if (window.OrderManager && typeof window.OrderManager.getOrdersCount === 'function') {
            return window.OrderManager.getOrdersCount();
        }

        // Fallback –∫ localStorage
        try {
            const orders = JSON.parse(localStorage.getItem('orders') || '[]');
            return orders.filter(order => order && order.id).length;
        } catch (e) {
            console.warn('[Header] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è orders:', e);
            return 0;
        }
    }

    setupCartManager() {
        // –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–π–¥–∂–µ–π
        let updateTimeout = null;
        const debouncedUpdate = () => {
            if (updateTimeout) clearTimeout(updateTimeout);
            updateTimeout = setTimeout(() => this.updateBadges(), 50);
        };

        // –°–ª—É—à–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        window.addEventListener('cartUpdated', debouncedUpdate);
        window.addEventListener('ordersUpdated', debouncedUpdate);

        // –°–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è localStorage (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        window.addEventListener('storage', (e) => {
            if (e.key === 'cartData' || e.key === 'orders') {
                console.log(`[Header] üíæ LocalStorage –∏–∑–º–µ–Ω–µ–Ω: ${e.key}`);
                debouncedUpdate();
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–∏)
        window.addEventListener('focus', debouncedUpdate, { passive: true });

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
        setInterval(() => this.updateBadges(), 20000);

        console.log('[Header] üîÑ CartManager –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    // === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===

    forceUpdateBadges() {
        console.log('[Header] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–µ–π');
        this.updateBadges();
    }

    setCartCount(count) {
        console.log(`[Header] üõí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã: ${count}`);
        this.setBadge(this.cartBadges, count);
    }

    setOrdersCount(count) {
        console.log(`[Header] üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤: ${count}`);
        this.setBadge(this.ordersBadges, count);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    updateCartCounter() {
        console.log('[Header] üîÑ –í—ã–∑–≤–∞–Ω updateCartCounter() (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)');
        this.updateBadges();
    }

    getTotalCount() {
        return this.getCartCount();
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    get isInitialized() {
        return !!this.header;
    }

    get currentCartCount() {
        return this.getCartCount();
    }

    get currentOrdersCount() {
        return this.getOrdersCount();
    }
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

let headerInstance = null;

function initHeader() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (headerInstance && headerInstance.isInitialized) {
        console.log('[Header] ‚ö†Ô∏è –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return headerInstance;
    }

    try {
        console.log('[Header] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
        headerInstance = new HeaderManager();

        if (headerInstance.isInitialized) {
            // –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
            window.headerManager = headerInstance;
            window.HeaderManager = HeaderManager;

            // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
            window.premiumHeader = headerInstance; // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

            // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å cart-manager.js
            if (!window.HeaderCompat) {
                window.HeaderCompat = {
                    updateCartCounter: () => headerInstance.updateCartCounter(),
                    updateBadges: () => headerInstance.forceUpdateBadges(),
                    forceUpdate: () => headerInstance.forceUpdateBadges()
                };
            }

            console.log('[Header] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ');

            // –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–µ–π —á–µ—Ä–µ–∑ 300ms
            setTimeout(() => headerInstance.forceUpdateBadges(), 300);

            return headerInstance;
        } else {
            console.error('[Header] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å - —Ö–µ–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        }

    } catch (error) {
        console.error('[Header] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        return null;
    }
}

// === –ê–í–¢–û–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        setTimeout(initHeader, 50);
    });
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    setTimeout(initHeader, 100);
}

// === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° CART-MANAGER ===

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ CartManager –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º—Å—è
function waitForCartManager() {
    if (window.CartManager && headerInstance) {
        console.log('[Header] üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CartManager');

        // –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ updateCartCounter –≤ CartManager –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (typeof window.CartManager.updateCartCounter === 'function') {
            const originalUpdate = window.CartManager.updateCartCounter.bind(window.CartManager);

            window.CartManager.updateCartCounter = function() {
                // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                originalUpdate();

                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à–∏ –±–µ–π–¥–∂–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                if (headerInstance) {
                    setTimeout(() => headerInstance.updateBadges(), 50);
                }
            };

            console.log('[Header] ‚úÖ CartManager.updateCartCounter –ø—Ä–æ–ø–∞—Ç—á–µ–Ω');
        }

        // –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        setTimeout(() => {
            if (headerInstance) {
                headerInstance.forceUpdateBadges();
            }
        }, 100);

    } else if (!window.CartManager) {
        // CartManager –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º
        setTimeout(waitForCartManager, 100);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ 200ms –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setTimeout(waitForCartManager, 200);

// === –≠–ö–°–ü–û–†–¢ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

if (typeof module !== 'undefined' && module.exports) {
    module.exports = { HeaderManager, initHeader };
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
window.initHeader = initHeader;
window.updateHeaderBadges = function() {
    if (headerInstance) {
        headerInstance.forceUpdateBadges();
        console.log('[Header] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    } else {
        console.warn('[Header] ‚ö†Ô∏è Header –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};