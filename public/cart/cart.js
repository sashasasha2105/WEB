/* === PREMIUM CART.JS - –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –° –ú–ê–°–°–ò–í–û–ú –û–ë–™–ï–ö–¢–û–í === */

/* === –¶–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã === */
const prices = { camera: 7499, memory_upgrade_64gb: 500 };
const CAMERA_WEIGHT_KG = 0.327;
const MEMORY_WEIGHT_KG = 0.008;
const CAMERA_DIMENSIONS = { length: 20, width: 12, height: 6 };
const MEMORY_DIMENSIONS = { length: 13, width: 8, height: 1 };
const FROM_LOCATION = 44; // –∫–æ–¥ –ú–æ—Å–∫–≤—ã –≤ CDEK

/* === –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï - –ú–ê–°–°–ò–í –û–ë–™–ï–ö–¢–û–í === */
let cartItems = []; // –ú–∞—Å—Å–∏–≤ –∫–∞–º–µ—Ä —Å –∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
let discount = 0;
let shipping = 0;

let cityCode = null;
let currentCity = '';
let cachedPreviews = {};
let selectedTariff = null;
let justSelectedCity = false;

/* === DOM-—à–æ—Ä—Ç–∫–∞—Ç—ã === */
const totalEl = () => document.getElementById('cartTotalValue');
const shipEl = () => document.getElementById('shippingCostValue');
const deliveryInfoEl = () => document.getElementById('deliveryInfo');
const cityIn = () => document.getElementById('addressInput');
const citySug = () => document.getElementById('citySuggestions');
const deliverySection = () => document.getElementById('deliveryMethodSection');
const streetWrapper = () => document.getElementById('streetWrapper');
const streetIn = () => document.getElementById('streetInput');
const mapContainer = () => document.getElementById('map');
const infoPanel = () => document.getElementById('pvz-info-panel');
const mapWrapper = () => document.querySelector('.map-wrapper');
const tariffContainer = document.getElementById('tariffOptions');
const recNameIn = () => document.getElementById('recipientName');
const recPhoneIn = () => document.getElementById('recipientPhone');
const recEmailIn = () => document.getElementById('recipientEmail');
const cartItemsCount = () => document.getElementById('cartItemsCount');

/* === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã === */
let mapInstance = null, cityClusterer = null, postamatClusterer = null, streetMarker = null;
let yandexMapsLoaded = false;

/* === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ï–ù–î–ï–†–ê –ö–û–†–ó–ò–ù–´ === */
function renderCart() {
  const container = document.getElementById('cartItemsContainer');
  if (!container) return;

  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  container.innerHTML = '';

  // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (cartItems.length === 0) {
    showEmptyCartMessage();
    updateCartCounters();
    updateCartSections();
    return;
  }

  hideEmptyCartMessage();

  // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ—Ä–∑–∏–Ω–µ
  cartItems.forEach(item => {
    const itemHTML = createCartItemHTML(item);
    container.insertAdjacentHTML('beforeend', itemHTML);
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  initCartItemControls();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ —Å–µ–∫—Ü–∏–∏
  updateCartCounters();
  updateCartSections();
}

/* === –°–û–ó–î–ê–ù–ò–ï HTML –ö–ê–†–¢–û–ß–ö–ò –¢–û–í–ê–†–ê === */
function createCartItemHTML(item) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –æ–ø—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
    const is8gbActive = item.memory === '8gb';
    const is64gbActive = item.memory === '64gb';

    return `
        <div class="cart-item glass" data-unique-id="${item.uniqueId}">
            <div class="item-image">
                <img src="/assets/images/cam3.jpg" alt="clip & go" />
            </div>

            <div class="item-main-content">
                <div class="item-info">
                    <h3>clip & go –∫–∞–º–µ—Ä–∞</h3>
                    <div class="item-details">
                        <span class="item-detail">üé® –¶–≤–µ—Ç: –ß—ë—Ä–Ω—ã–π</span>
                        <span class="item-detail">üí∞ –¶–µ–Ω–∞: ${item.price.toLocaleString('ru-RU')} ‚ÇΩ</span>
                    </div>
                </div>

                <div class="item-configurator">
                    <div class="config-header">
                        <span class="config-icon">üíæ</span>
                        <span>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è</span>
                    </div>
                    <div class="config-choices">
                        <button class="memory-option ${is8gbActive ? 'active' : ''}" data-memory="8gb" data-item-id="${item.uniqueId}">
                            <img src="/assets/images/8gb.svg" alt="8 –ì–ë" class="memory-image">
                            <div class="memory-details">
                                <span class="memory-size">8 –ì–ë</span>
                                <span class="memory-price">–í –∫–æ–º–ø–ª–µ–∫—Ç–µ</span>
                            </div>
                            <div class="checkmark-icon">‚úì</div>
                        </button>
                        <button class="memory-option ${is64gbActive ? 'active' : ''}" data-memory="64gb" data-item-id="${item.uniqueId}">
                            <img src="/assets/images/64gb.svg" alt="64 –ì–ë" class="memory-image">
                            <div class="memory-details">
                                <span class="memory-size">64 –ì–ë</span>
                                <span class="memory-price">+ ${prices.memory_upgrade_64gb} ‚ÇΩ</span>
                            </div>
                            <div class="checkmark-icon">‚úì</div>
                        </button>
                    </div>
                </div>
            </div>

            <div class="item-controls">
                <button class="remove-item-btn premium-btn secondary" data-item-id="${item.uniqueId}">
                    –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `;
}

/* === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –î–õ–Ø –≠–õ–ï–ú–ï–ù–¢–û–í –ö–û–†–ó–ò–ù–´ === */
function initCartItemControls() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π –ø–∞–º—è—Ç–∏
  document.querySelectorAll('.memory-option').forEach(option => {
    option.addEventListener('click', (e) => {
      e.preventDefault();
      handleMemoryOptionChange(option);
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
  document.querySelectorAll('.remove-item-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      handleItemRemove(btn.dataset.itemId);
    });
  });
}

/* === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –û–ü–¶–ò–ò –ü–ê–ú–Ø–¢–ò === */
function handleMemoryOptionChange(optionElement) {
  const itemId = optionElement.dataset.itemId;
  const selectedMemory = optionElement.dataset.memory;
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ –º–∞—Å—Å–∏–≤–µ
  const itemIndex = cartItems.findIndex(item => item.uniqueId == itemId);
  if (itemIndex === -1) return;

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  cartItems[itemIndex].memory = selectedMemory;
  cartItems[itemIndex].price = calculateItemPrice(selectedMemory);

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
  addPremiumButtonAnimation(optionElement);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const memoryText = selectedMemory === '8gb' ? '8 –ì–ë (–≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ)' : `64 –ì–ë (+${prices.memory_upgrade_64gb} ‚ÇΩ)`;
  showNotification(`–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ ${memoryText}`, 'success');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
  saveCart();
  renderCart();
}

/* === –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–î–ê–õ–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ò === */
function handleItemRemove(itemId) {
  showConfirm(
    '–£–¥–∞–ª–∏—Ç—å –∫–∞–º–µ—Ä—É?',
    '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞–º–µ—Ä—É –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?',
    () => {
      // –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞
      cartItems = cartItems.filter(item => item.uniqueId != itemId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
      saveCart();
      renderCart();
      
      showNotification('–ö–∞–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'info');
    }
  );
}


/* === –†–ê–°–ß–ï–¢ –¶–ï–ù–´ –ü–û–ó–ò–¶–ò–ò === */
function calculateItemPrice(memoryOption) {
  const basePrice = prices.camera;
  const memoryUpgrade = memoryOption === '64gb' ? prices.memory_upgrade_64gb : 0;
  return basePrice + memoryUpgrade;
}

/* === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–ú–ï–†–´ –í –ö–û–†–ó–ò–ù–£ === */
function addCameraToCart(memoryOption = '8gb') {
  const newItem = {
    uniqueId: Date.now() + Math.random(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    memory: memoryOption,                  // –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
    price: calculateItemPrice(memoryOption) // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
  };

  cartItems.push(newItem);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
  saveCart();
  renderCart();
  
  showNotification(`–ö–∞–º–µ—Ä–∞ —Å ${memoryOption === '64gb' ? '64 –ì–ë' : '8 –ì–ë'} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!`, 'success');
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
window.addCameraToCart = addCameraToCart;

/* === –í–´–ë–û–† –ö–û–ú–ü–õ–ï–ö–¢–ê–¶–ò–ò –ò –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–ú–ï–†–´ === */
function showAddCameraDialog() {
  showConfirm(
    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é',
    '–ö–∞–∫—É—é –∫–∞–º–µ—Ä—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?',
    () => addCameraToCart('8gb'), // –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º 8GB –≤–µ—Ä—Å–∏—é
    () => addCameraToCart('64gb'), // –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º 64GB –≤–µ—Ä—Å–∏—é
    '8 –ì–ë (7 499 ‚ÇΩ)',
    '64 –ì–ë (7 999 ‚ÇΩ)'
  );
}

/* === –†–ê–°–ß–ï–¢ –û–ë–©–ï–ô –°–£–ú–ú–´ –ö–û–†–ó–ò–ù–´ === */
function calculateCartTotal() {
  return cartItems.reduce((total, item) => total + item.price, 0);
}

/* === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–û–í –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò === */
function updateCartCounters() {
  // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–º–µ—Ä—ã (–Ω–µ SD-–∫–∞—Ä—Ç—ã)
  const cameraCount = cartItems.length;
  const totalSum = calculateCartTotal();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ hero
  const itemCountEl = cartItemsCount();
  if (itemCountEl) {
    animateCounterChange(itemCountEl, cameraCount);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ hero
  const cartTotalDisplay = document.getElementById('cartTotalDisplay');
  if (cartTotalDisplay) {
    const finalSum = totalSum - Math.round(totalSum * discount / 100) + shipping;
    cartTotalDisplay.textContent = finalSum.toLocaleString('ru-RU') + ' ‚ÇΩ';
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥
  const itemsSubtotal = document.getElementById('itemsSubtotal');
  if (itemsSubtotal) {
    itemsSubtotal.textContent = totalSum.toLocaleString('ru-RU');
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
  updateFinalTotal();
}

/* === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–¢–û–ì–û–í–û–ô –°–£–ú–ú–´ === */
function updateFinalTotal() {
  const totalSum = calculateCartTotal();
  const discountAmount = Math.round(totalSum * discount / 100);
  const finalSum = totalSum - discountAmount + shipping;

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏
  const discountRow = document.getElementById('discountRow');
  if (discount > 0) {
    document.getElementById('discountAmount').textContent = discountAmount.toLocaleString('ru-RU');
    discountRow.style.display = 'flex';
  } else {
    discountRow.style.display = 'none';
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
  const totalElement = totalEl();
  if (totalElement) {
    animateCounterChange(totalElement, finalSum, true);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
  if (shipEl()) {
    shipEl().textContent = shipping.toLocaleString('ru-RU');
  }
}

/* === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ò–ú–û–°–¢–¨–Æ –°–ï–ö–¶–ò–ô === */
function updateCartSections() {
  const hasItems = cartItems.length > 0;
  
  const sections = [
    'deliverySectionContainer',
    'recipientSectionContainer', 
    'orderSummaryContainer',
    'promoSectionContainer'
  ];

  sections.forEach(sectionId => {
    const section = document.getElementById(sectionId);
    if (section) {
      if (hasItems) {
        section.style.display = 'block';
        section.classList.add('premium-slide-up');
      } else {
        section.style.display = 'none';
      }
    }
  });
}

/* === –°–û–û–ë–©–ï–ù–ò–Ø –û –ü–£–°–¢–û–ô –ö–û–†–ó–ò–ù–ï === */
function showEmptyCartMessage() {
  const emptyMessage = document.getElementById('emptyCartMessage');
  if (emptyMessage) {
    emptyMessage.style.display = 'block';
  }
}

function hideEmptyCartMessage() {
  const emptyMessage = document.getElementById('emptyCartMessage');
  if (emptyMessage) {
    emptyMessage.style.display = 'none';
  }
}

/* === –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê –ö–û–†–ó–ò–ù–´ === */
function saveCart() {
  if (window.CartManager) {
    const currentData = window.CartManager.getCartData();
    const extendedData = {
      ...currentData,
      cartItems: cartItems,
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      cameraCount: cartItems.length,
      selectedMemoryOption: cartItems.length > 0 ? cartItems[0].memory : '8gb'
    };
    localStorage.setItem('cartData', JSON.stringify(extendedData));
  }
}

function loadCart() {
  if (window.CartManager) {
    const data = window.CartManager.getCartData();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    if (data && Array.isArray(data)) {
      cartItems = data;
    } else {
      cartItems = [];
    }

    // –ü–†–û–í–ï–†–Ø–ï–ú –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê –ò–ó –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´
    const itemToAddData = localStorage.getItem('itemToAdd');
    if (itemToAddData) {
      try {
        const itemToAdd = JSON.parse(itemToAddData);
        console.log('[Cart] –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', itemToAdd);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        const newItem = {
          uniqueId: Date.now() + Math.random(),
          memory: itemToAdd.memory || '8gb',
          price: calculateItemPrice(itemToAdd.memory || '8gb')
        };
        
        cartItems.push(newItem);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        saveCart();
        
        // –£–¥–∞–ª—è–µ–º itemToAdd –∏–∑ localStorage
        localStorage.removeItem('itemToAdd');
        
        console.log('[Cart] –ö–∞–º–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', newItem);
      } catch (error) {
        console.error('[Cart] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        localStorage.removeItem('itemToAdd');
      }
    }
  }
}

/* === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø === */
document.addEventListener('DOMContentLoaded', () => {
  console.log('üöÄ –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞) –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

  try {
    addTouchableClasses();
    loadCart();
    renderCart(); // –ì–õ–ê–í–ù–´–ô –í–´–ó–û–í –†–ï–ù–î–ï–†–ê
    initMainControls();
    initCitySuggest();
    initDeliveryToggle();
    initStreetInput();
    initBackButton();
    hideTariffs();

    checkYandexMapsStatus();

    setTimeout(() => {
      initPremiumAnimations();
    }, 500);

    console.log('‚úÖ –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
  }
});

/* === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–°–ù–û–í–ù–´–• –ö–û–ù–¢–†–û–õ–û–í === */
function initMainControls() {
  // –ü—Ä–æ–º–æ–∫–æ–¥—ã
  const applyPromoBtn = document.getElementById('applyPromoBtn');
  if (applyPromoBtn) {
    applyPromoBtn.addEventListener('click', () => {
      addPremiumButtonAnimation(applyPromoBtn);
      handlePromoCode();
    });
  }

  const removePromoBtn = document.getElementById('removePromoBtn');
  if (removePromoBtn) {
    removePromoBtn.addEventListener('click', () => {
      addPremiumButtonAnimation(removePromoBtn);
      removePromoCode();
    });
  }

  // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const checkoutBtn = document.getElementById('checkoutBtn');
  if (checkoutBtn) {
    checkoutBtn.addEventListener('click', () => {
      addPremiumButtonAnimation(checkoutBtn);
      handleCheckout();
    });
  }
}

/* === –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ú–û–ö–û–î–û–í === */
function handlePromoCode() {
  const code = document.getElementById('promoInput').value.trim().toLowerCase();
  
  if (code === 'clipgo25') {
    discount = 7;
    showNotification('üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞ 7%', 'success');
  } else if (code === 'clipgo222') {
    discount = 20;
    showNotification('üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞ 20%', 'success');
  } else {
    showNotification('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!', 'error');
    return;
  }

  const removeBtn = document.getElementById('removePromoBtn');
  if (removeBtn) {
    removeBtn.style.display = 'inline-flex';
  }
  
  updateFinalTotal();
}

function removePromoCode() {
  discount = 0;
  document.getElementById('promoInput').value = '';
  
  const removeBtn = document.getElementById('removePromoBtn');
  if (removeBtn) {
    removeBtn.style.display = 'none';
  }
  
  showNotification('–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω', 'info');
  updateFinalTotal();
}

/* === –û–ë–†–ê–ë–û–¢–ö–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê === */
async function handleCheckout() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
  const totalSum = calculateCartTotal();
  if (totalSum <= 0) {
    showNotification('–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É', 'error');
    return;
  }

  const discounted = totalSum - Math.round(totalSum * discount / 100);
  const amount = discounted + shipping;

  if (!selectedTariff) {
    showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏', 'error');
    scrollToElement(deliverySection());
    return;
  }

  const name = recNameIn().value.trim();
  const phone = recPhoneIn().value.trim();

  if (!name || !phone) {
    showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è', 'error');
    scrollToElement(recNameIn());
    return;
  }

  if (!isValidPhone(phone)) {
    showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
    recPhoneIn().focus();
    return;
  }

  if (selectedTariff.type === 'COURIER' && !streetIn().value.trim()) {
    showNotification('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏', 'error');
    scrollToElement(streetIn());
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
  showPremiumPaymentLoader();

  // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
  const orderData = {
    id: `CG-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
    status: 'created',
    amount: amount,
    items: cartItems.map(item => ({
      name: `clip & go –∫–∞–º–µ—Ä–∞ —Å –∫–∞—Ä—Ç–æ–π ${item.memory === '8gb' ? '8 –ì–ë' : '64 –ì–ë'}`,
      cost: item.price,
      quantity: 1,
      configuration: {
        memory: item.memory
      }
    })),
    delivery: {
      type: getDeliveryMethodText(selectedTariff.type),
      address: selectedTariff.address,
      tariff: selectedTariff.code,
      cost: shipping
    },
    recipient: {
      name: name,
      phone: phone,
      email: recEmailIn().value.trim() || null
    },
    discount: discount > 0 ? { percent: discount, amount: Math.round(totalSum * discount / 100) } : null,
    createdAt: new Date().toISOString()
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
  if (window.OrderManager) {
    window.OrderManager.addOrder(orderData);
  }

  localStorage.setItem('pendingOrderData', JSON.stringify(orderData));

  try {
    const resp = await fetch('/api/yookassa/create-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        amount,
        currency: 'RUB',
        description: `–ó–∞–∫–∞–∑ clip & go –Ω–∞ —Å—É–º–º—É ${amount} ‚ÇΩ`,
        internalOrderId: orderData.id
      })
    });

    const payment = await resp.json();
    if (!resp.ok) throw new Error(payment.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');

    updateLoaderText('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...');
    
    setTimeout(() => {
      window.location.href = payment.confirmation_url;
    }, 1000);

  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', e);
    hidePremiumPaymentLoader();
    showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ' + e.message, 'error');
  }
}

/* === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò === */

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ touchable –∫–ª–∞—Å—Å–æ–≤
function addTouchableClasses() {
  const touchableElements = [
    '.cart-hero',
    '.cart-item',
    '.promo-card',
    '.delivery-card',
    '.recipient-card',
    '.summary-card',
    '.delivery-option',
    '.premium-btn',
    '.memory-option',
    '.tariff-btn'
  ];

  touchableElements.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    elements.forEach(el => {
      if (!el.classList.contains('touchable')) {
        el.classList.add('touchable');
      }
    });
  });
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
function animateCounterChange(element, newValue, isPrice = false) {
  if (!element) return;

  const currentValue = isPrice ? 
    parseFloat(element.textContent.replace(/[^\d]/g, '')) || 0 :
    parseInt(element.textContent) || 0;

  if (currentValue === newValue) return;

  const duration = 600;
  const startTime = performance.now();

  function update(currentTime) {
    const elapsed = currentTime - startTime;
    const progress = Math.min(elapsed / duration, 1);

    const current = Math.floor(currentValue + (newValue - currentValue) * easeOutCubic(progress));
    
    if (isPrice) {
      element.textContent = current.toLocaleString('ru-RU');
    } else {
      element.textContent = current;
    }

    if (progress < 1) {
      const pulse = 1 + Math.sin(progress * Math.PI * 2) * 0.05;
      element.style.transform = `scale(${pulse})`;
      requestAnimationFrame(update);
    } else {
      element.style.transform = '';
    }
  }

  requestAnimationFrame(update);
}

function easeOutCubic(t) {
  return 1 - Math.pow(1 - t, 3);
}

// –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
function addPremiumButtonAnimation(button) {
  if (!button) return;
  
  button.style.animation = 'premiumHaptic 0.15s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
  button.style.transform = 'scale(0.97) translateY(1px)';

  setTimeout(() => {
    button.style.animation = '';
    button.style.transform = '';
  }, 150);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function isValidPhone(phone) {
  const phoneRegex = /^(\+7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
  return phoneRegex.test(phone.replace(/\s+/g, ''));
}

// –¢–µ–∫—Å—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
function getDeliveryMethodText(type) {
  const methods = {
    'COURIER': '–ö—É—Ä—å–µ—Ä –°–î–≠–ö',
    'PVZ': '–ü–í–ó –°–î–≠–ö',
    'POSTAMAT': '–ü–æ—Å—Ç–∞–º–∞—Ç –°–î–≠–ö'
  };
  return methods[type] || '–î–æ—Å—Ç–∞–≤–∫–∞';
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
function scrollToElement(element) {
  if (element) {
    element.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }
}

/* === –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò === */

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
function initCitySuggest() {
  const cityInput = cityIn();
  if (!cityInput) return;

  cityInput.addEventListener('input', debounce(async e => {
    if (justSelectedCity) {
      justSelectedCity = false;
      return;
    }

    const q = e.target.value.trim();
    currentCity = '';
    cityCode = null;
    resetDeliveryFlow();

    const ul = citySug();
    if (!ul) return;
    
    ul.innerHTML = '';
    ul.classList.remove('visible');
    if (q.length < 2) return;

    try {
      const resp = await fetch(`/api/yandex/suggest?text=${encodeURIComponent(q)}`);
      const j = await resp.json();
      renderCitySuggestions(j.results || []);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:', e);
      showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤', 'error');
    }
  }, 300));
}

function renderCitySuggestions(items) {
  const ul = citySug();
  if (!ul) return;
  
  ul.innerHTML = '';
  if (!items.length) {
    ul.classList.remove('visible');
    return;
  }

  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ input
  const cityInput = cityIn();
  if (cityInput) {
    const rect = cityInput.getBoundingClientRect();
    ul.style.position = 'fixed';
    ul.style.top = `${rect.bottom + 8}px`;
    ul.style.left = `${rect.left}px`;
    ul.style.width = `${rect.width}px`;
    ul.style.zIndex = '9999';
  }

  items.forEach(it => {
    const txt = it.title.text + (it.subtitle ? ', ' + it.subtitle.text : '');
    const li = document.createElement('li');
    li.innerHTML = `
      <div class="city-suggestion-content">
        <div class="city-name">${it.title.text}</div>
        ${it.subtitle ? `<div class="city-region">${it.subtitle.text}</div>` : ''}
      </div>
    `;
    
    li.addEventListener('click', async () => {
      justSelectedCity = true;
      cityInput.value = txt;
      currentCity = txt;
      ul.innerHTML = '';
      ul.classList.remove('visible');

      showNotification('üîç –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞...', 'info');
      await fetchCdekCityCode(txt);

      if (cityCode) {
        showElement(deliverySection());
        showNotification('‚úÖ –ì–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏', 'success');
      } else {
        showNotification('‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –°–î–≠–ö', 'error');
      }
    });
    ul.append(li);
  });
  ul.classList.add('visible');
}

async function fetchCdekCityCode(cityName) {
  try {
    const q = cityName.split(',')[0].trim();
    const resp = await fetch(`/api/cdek/cities?search=${encodeURIComponent(q)}`);
    const j = await resp.json();
    const f = Array.isArray(j) ? j[0] : (j.results ? j.results[0] : null);
    cityCode = f ? f.code : null;
    console.log('[CDEK] –ö–æ–¥ –≥–æ—Ä–æ–¥–∞:', cityCode, '–¥–ª—è', q);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞:', e);
    cityCode = null;
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
function initDeliveryToggle() {
  const courierRadio = document.getElementById('deliveryCourier');
  const pvzRadio = document.getElementById('deliveryPvz');

  if (courierRadio) {
    courierRadio.addEventListener('change', () => {
      if (!cityCode) return;
      showElement(streetWrapper());
      hideMapWrapper();
      hideTariffs();
      selectedTariff = null;
      shipping = 0;
      if (deliveryInfoEl()) deliveryInfoEl().textContent = '';
      updateFinalTotal();

      showNotification('üöõ –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–∞', 'info');
      showCourierTariffs();
    });
  }

  if (pvzRadio) {
    pvzRadio.addEventListener('change', () => {
      if (!cityCode) return;
      showElement(streetWrapper());
      hideTariffs();
      selectedTariff = null;
      shipping = 0;
      if (deliveryInfoEl()) deliveryInfoEl().textContent = '';
      updateFinalTotal();

      showNotification('üìÆ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏...', 'info');
      showMapWrapper(currentCity, fetchAndPlotPvz);
    });
  }
}

async function showCourierTariffs() {
  showNotification('‚ö° –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏...', 'info');
  await preloadTariffPreviews([137, 482]);
  renderTariffButtons('COURIER', '–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', null);
}

// –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ —É–ª–∏—Ü—ã
function initStreetInput() {
  const streetInput = streetIn();
  if (!streetInput) return;

  streetInput.addEventListener('change', async () => {
    const addr = streetInput.value.trim();
    if (!addr || !yandexMapsLoaded || !mapInstance) return;

    try {
      const full = `${currentCity}, ${addr}`;
      const res = await ymaps.geocode(full);
      const firstResult = res.geoObjects.get(0);

      if (firstResult) {
        const coords = firstResult.geometry.getCoordinates();
        mapInstance.setCenter(coords, 14, { duration: 500 });

        if (streetMarker) mapInstance.geoObjects.remove(streetMarker);
        streetMarker = new ymaps.Placemark(coords,
          { balloonContent: `${full}` },
          { preset: 'islands#circleIcon', iconColor: '#FF5733' }
        );
        mapInstance.geoObjects.add(streetMarker);
        showNotification('üìç –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ', 'success');
      } else {
        showNotification('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warning');
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', e);
      showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞', 'error');
    }
  });
}

// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞  
function initBackButton() {
  const backButton = document.getElementById('backButton');
  if (!backButton) return;

  backButton.addEventListener('click', () => {
    addPremiumButtonAnimation(backButton);
    
    const referrer = document.referrer;
    let redirectUrl = '/index.html';
    
    if (referrer) {
      try {
        const referrerUrl = new URL(referrer);
        const currentUrl = new URL(window.location.href);
        
        if (referrerUrl.origin === currentUrl.origin) {
          if (!referrerUrl.pathname.includes('/cart/')) {
            redirectUrl = referrerUrl.pathname + referrerUrl.search;
          }
        }
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ referrer, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
      }
    }
    
    showNotification('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å–∞–π—Ç...', 'info', 2000);
    
    setTimeout(() => {
      window.location.href = redirectUrl;
    }, 300);
  });
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏
function hideTariffs() {
  if (tariffContainer) {
    tariffContainer.classList.remove('visible');
    tariffContainer.innerHTML = '';
  }
}

function showTariffs() {
  if (tariffContainer) {
    tariffContainer.classList.add('visible');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
function checkYandexMapsStatus() {
  if (typeof ymaps !== 'undefined') {
    console.log('[Maps] –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    yandexMapsLoaded = true;
    return;
  }

  let attempts = 0;
  const checkInterval = setInterval(() => {
    attempts++;
    if (typeof ymaps !== 'undefined') {
      console.log('[Maps] –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ', attempts, '–ø–æ–ø—ã—Ç–æ–∫');
      yandexMapsLoaded = true;
      clearInterval(checkInterval);

      if (mapWrapper() && mapWrapper().style.display === 'flex') {
        console.log('[Maps] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ API');
        initializeMapForCurrentCity();
      }
    } else if (attempts > 50) {
      console.error('[Maps] –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∑–∞ 10 —Å–µ–∫—É–Ω–¥');
      clearInterval(checkInterval);
      showMapError();
    }
  }, 200);
}

// –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
function initPremiumAnimations() {
  console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π...');

  const animatedElements = [
    { selector: '.cart-hero', delay: 100 },
    { selector: '.cart-section', delay: 200, stagger: 100 }
  ];

  animatedElements.forEach(({ selector, delay, stagger = 0 }) => {
    const elements = document.querySelectorAll(selector);
    elements.forEach((el, index) => {
      setTimeout(() => {
        el.classList.add('premium-slide-up');
        
        if (el.classList.contains('cart-hero')) {
          el.style.transform = 'translateY(0)';
          el.style.opacity = '1';
        }
      }, delay + (index * stagger));
    });
  });

}

function initHeroEffects() {
  const heroIcon = document.querySelector('.cart-icon-container');
  if (heroIcon) {
    heroIcon.style.animation = 'cartIconPulse 3s ease-in-out infinite';
  }

  const hero = document.querySelector('.cart-hero');
  if (hero) {
    hero.addEventListener('mouseenter', () => {
      hero.style.animation = 'none';
      setTimeout(() => {
        hero.style.animation = '';
      }, 50);
    });
  }
}

// –õ–æ–∞–¥–µ—Ä—ã –æ–ø–ª–∞—Ç—ã
function showPremiumPaymentLoader() {
  let loader = document.getElementById('premiumPaymentLoader');
  if (!loader) {
    loader = document.createElement('div');
    loader.id = 'premiumPaymentLoader';
    loader.innerHTML = `
      <div class="premium-loader-backdrop">
        <div class="premium-loader-content">
          <div class="premium-loader-spinner"></div>
          <div class="premium-loader-text">–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑...</div>
          <div class="premium-loader-subtext">–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É</div>
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –ª–æ–∞–¥–µ—Ä–∞
    loader.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(10px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
    `;
    
    const content = loader.querySelector('.premium-loader-content');
    content.style.cssText = `
      background: rgba(255, 255, 255, 0.95);
      padding: 40px;
      border-radius: 20px;
      text-align: center;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    `;
    
    const spinner = loader.querySelector('.premium-loader-spinner');
    spinner.style.cssText = `
      width: 50px;
      height: 50px;
      border: 4px solid #e3f2fd;
      border-top: 4px solid #1ca6f8;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    `;
    
    document.body.appendChild(loader);
  }
  loader.style.display = 'flex';
  document.body.style.overflow = 'hidden';
}

function hidePremiumPaymentLoader() {
  const loader = document.getElementById('premiumPaymentLoader');
  if (loader) {
    loader.style.display = 'none';
    document.body.style.overflow = '';
  }
}

function updateLoaderText(text) {
  const loaderText = document.querySelector('.premium-loader-text');
  if (loaderText) {
    loaderText.textContent = text;
  }
}

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info', duration = 3000) {
  const container = getNotificationContainer();
  
  const notification = document.createElement('div');
  notification.className = `premium-notification ${type}`;
  
  const icons = {
    success: '‚úÖ',
    error: '‚ùå', 
    warning: '‚ö†Ô∏è',
    info: '‚ÑπÔ∏è'
  };

  notification.innerHTML = `
    <div class="notification-icon">${icons[type] || icons.info}</div>
    <div class="notification-message">${message}</div>
  `;

  // –°—Ç–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notification.style.cssText = `
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 16px 20px;
    margin-bottom: 12px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    border-left: 4px solid ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : type === 'warning' ? '#f59e0b' : '#1ca6f8'};
    transform: translateX(400px);
    opacity: 0;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    font-weight: 500;
    color: #1f2937;
    max-width: 300px;
  `;

  container.appendChild(notification);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    notification.style.transform = 'translateX(0)';
    notification.style.opacity = '1';
  }, 10);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
  setTimeout(() => {
    notification.style.transform = 'translateX(400px)';
    notification.style.opacity = '0';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 400);
  }, duration);
}

function getNotificationContainer() {
  let container = document.getElementById('notificationContainer');
  if (!container) {
    container = document.createElement('div');
    container.id = 'notificationContainer';
    container.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 10001;
      pointer-events: none;
    `;
    
    container.addEventListener('click', (e) => {
      e.target.style.pointerEvents = 'auto';
    });
    document.body.appendChild(container);
  }
  return container;
}

// –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function showConfirm(title, message, onConfirm, onCancel = null, confirmText = '–î–∞, —É–¥–∞–ª–∏—Ç—å', cancelText = '–û—Ç–º–µ–Ω–∞') {
  // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –∏ —Å–∞–º–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const backdrop = document.createElement('div');
  backdrop.className = 'premium-confirm-backdrop';

  const modal = document.createElement('div');
  modal.className = 'premium-confirm-modal';
  modal.innerHTML = `
    <div class="premium-confirm-content">
      <div class="premium-confirm-header"><h3>${title}</h3></div>
      <div class="premium-confirm-body"><p>${message}</p></div>
      <div class="premium-confirm-actions">
        <button class="premium-btn secondary" id="confirmCancel">${cancelText}</button>
        <button class="premium-btn primary" id="confirmOk">${confirmText}</button>
      </div>
    </div>
  `;

  document.body.appendChild(backdrop);
  document.body.appendChild(modal);
  document.body.style.overflow = 'hidden';

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    backdrop.classList.add('visible');
    modal.classList.add('visible');
  }, 10);

  const okBtn = modal.querySelector('#confirmOk');
  const cancelBtn = modal.querySelector('#confirmCancel');

  const closeModal = () => {
    backdrop.classList.remove('visible');
    modal.classList.remove('visible');
    document.body.style.overflow = '';
    setTimeout(() => {
      if (backdrop.parentNode) backdrop.parentNode.removeChild(backdrop);
      if (modal.parentNode) modal.parentNode.removeChild(modal);
    }, 300); // –í—Ä–µ–º—è –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
  };

  okBtn.addEventListener('click', () => {
    if (onConfirm) onConfirm();
    closeModal();
  });

  cancelBtn.addEventListener('click', () => {
    if (onCancel) onCancel();
    closeModal();
  });

  backdrop.addEventListener('click', () => {
    if (onCancel) onCancel();
    closeModal();
  });
}

/* === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò === */

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç
function showElement(el) {
  if (el) {
    el.style.display = 'block';
    el.classList.add('visible');
  }
}

function hideElement(el) {
  if (el) {
    el.style.display = 'none';
    el.classList.remove('visible');
  }
}

// –°–±—Ä–æ—Å flow –¥–æ—Å—Ç–∞–≤–∫–∏
function resetDeliveryFlow() {
  hideElement(deliverySection());
  hideElement(streetWrapper());
  if (infoPanel()) hideElement(infoPanel());
  hideMapWrapper();
  hideTariffs();
  selectedTariff = null;
  shipping = 0;
  updateFinalTotal();
}

// Debounce —Ñ—É–Ω–∫—Ü–∏—è
function debounce(fn, ms = 300) {
  let t;
  return (...a) => { clearTimeout(t); t = setTimeout(() => fn(...a), ms); };
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ–π
function showMapWrapper(city, cb) {
  const wrapper = mapWrapper();
  if (!wrapper) return;

  if (!yandexMapsLoaded) {
    console.log('[Maps] –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∂–¥–µ–º...');
    showNotification('üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É...', 'info');

    wrapper.style.display = 'grid';
    wrapper.classList.add('with-panel');
    const container = mapContainer();
    if (container) {
      container.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: center; height: 100%; color: #666; flex-direction: column; background: rgba(255,255,255,0.9); border-radius: 20px;">
          <div style="font-size: 3em; margin-bottom: 20px; animation: premiumFloat 3s ease-in-out infinite;">üó∫Ô∏è</div>
          <div style="font-size: 1.2em; font-weight: 600;">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</div>
          <div style="font-size: 0.9em; color: #999; margin-top: 8px;">–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ</div>
        </div>
      `;
    }

    const waitForMaps = () => {
      if (yandexMapsLoaded) {
        initializeMapForCity(city, cb);
      } else {
        setTimeout(waitForMaps, 500);
      }
    };
    waitForMaps();
    return;
  }

  wrapper.style.display = 'grid';
  wrapper.classList.add('with-panel');
  initializeMapForCity(city, cb);
}

function hideMapWrapper() {
  const wrapper = mapWrapper();
  if (wrapper) {
    wrapper.style.display = 'none';
    wrapper.classList.remove('with-panel');
  }
}

function initializeMapForCity(city, callback) {
  if (!yandexMapsLoaded) {
    console.error('[Maps] –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –±–µ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ API');
    return;
  }

  ymaps.ready(() => {
    ymaps.geocode(city).then(r => {
      const firstResult = r.geoObjects.get(0);
      if (!firstResult) {
        showMapError('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ');
        return;
      }

      const coords = firstResult.geometry.getCoordinates();

      if (mapInstance) {
        mapInstance.setCenter(coords, 10, { duration: 500 });
      } else {
        mapInstance = new ymaps.Map('map', {
          center: coords,
          zoom: 10,
          controls: ['zoomControl', 'fullscreenControl']
        });
      }

      if (callback) callback();
    }).catch(err => {
      console.error('[Maps] –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
      showMapError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
    });
  });
}

function showMapError(message = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã') {
  const container = mapContainer();
  if (container) {
    container.innerHTML = `
      <div style="display: flex; align-items: center; justify-content: center; height: 100%; color: #dc3545; flex-direction: column; background: rgba(255,255,255,0.9); border-radius: 20px;">
        <div style="font-size: 3em; margin-bottom: 20px;">‚ùå</div>
        <div style="font-size: 1.2em; font-weight: 600; margin-bottom: 15px;">${message}</div>
        <button onclick="retryMapLoad()" class="premium-btn primary">
          <span>üîÑ</span>
          <span>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</span>
        </button>
      </div>
    `;
  }
}

function retryMapLoad() {
  checkYandexMapsStatus();
  if (currentCity) {
    showMapWrapper(currentCity, fetchAndPlotPvz);
  }
}

/* === –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´ –° –ö–ê–†–¢–û–ô –ò –ü–í–ó (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) === */

function clearClusters() {
    if (cityClusterer) cityClusterer.removeAll();
    if (postamatClusterer) postamatClusterer.removeAll();
}

async function fetchAndPlotPvz() {
    if (!cityCode || !mapInstance || !yandexMapsLoaded) {
        console.warn('[PVZ] –ù–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ü–í–ó.');
        showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥', 'warning');
        return;
    }

    if (!cityClusterer) {
        const clustererOptions = {
            preset: 'islands#invertedDarkBlueClusterIcons',
            groupByCoordinates: false,
            clusterDisableClickZoom: false,
            clusterOpenBalloonOnClick: false
        };
        cityClusterer = new ymaps.Clusterer(clustererOptions);
        postamatClusterer = new ymaps.Clusterer({ ...clustererOptions, preset: 'islands#invertedLightBlueClusterIcons' });
        mapInstance.geoObjects.add(cityClusterer).add(postamatClusterer);
    }
    clearClusters();

    try {
        showNotification('üìÆ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏...', 'info');
        const url = `/api/cdek/pvz?cityId=${encodeURIComponent(cityCode)}&type=ALL&size=1000`;
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const all = await resp.json();
        if (all.length === 0) {
            showNotification('‚ùå –ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ', 'warning');
            return;
        }

        all.forEach(pt => {
            if (!pt.location?.latitude || !pt.location?.longitude) return;
            const coords = [parseFloat(pt.location.latitude), parseFloat(pt.location.longitude)];
            const placemark = new ymaps.Placemark(coords, {}, {
                iconLayout: 'default#image',
                iconImageHref: pt.type === 'PVZ' ? '/assets/icons/pvz.png' : '/assets/icons/postamat.png',
                iconImageSize: [32, 32],
                iconImageOffset: [-16, -32]
            });
            placemark.events.add('click', () => {
                mapInstance.setCenter(coords, 14, { duration: 500 });
                renderPvzInfoPanel(pt);
            });
            (pt.type === 'PVZ' ? cityClusterer : postamatClusterer).add(placemark);
        });
        showNotification(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${all.length} –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏`, 'success');
    } catch (error) {
        console.error('[PVZ] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ü–í–ó:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏', 'error');
    }
}

function renderPvzInfoPanel(point) {
    const { location, type, work_time, note } = point;
    const panel = infoPanel();
    if (!panel) return;

    panel.innerHTML = `
        <h3>${type === 'PVZ' ? 'üìÆ –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏' : 'üì¶ –ü–æ—Å—Ç–∞–º–∞—Ç'}</h3>
        <p><strong>üìç –ê–¥—Ä–µ—Å:</strong> ${location.address_full || '‚Äî'}</p>
        <p><strong>üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> ${work_time || '‚Äî'}</p>
        ${note ? `<p><strong>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> ${note}</p>` : ''}
        <button id="selectPvzBtn" class="premium-btn primary" style="width:100%;margin-top:16px;">
          <span>‚úÖ</span>
          <span>–í—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç</span>
        </button>
    `;
    showElement(panel);

    document.getElementById('selectPvzBtn').addEventListener('click', (e) => {
        e.preventDefault();
        const tariffCodes = type === 'PVZ' ? [136, 483] : [368, 486];
        preloadTariffPreviews(tariffCodes);
        renderTariffButtons(type, location.address_full, point.code);
        showNotification(`‚úÖ ${type === 'PVZ' ? '–ü—É–Ω–∫—Ç' : '–ü–æ—Å—Ç–∞–º–∞—Ç'} –≤—ã–±—Ä–∞–Ω`, 'success');
    });
}

async function preloadTariffPreviews(codes) {
    console.log('Preloading tariffs:', codes);
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ —á–µ—Ä–µ–∑ API
    showNotification('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

function renderTariffButtons(type, address, pvzCode) {
    console.log('Rendering tariffs for:', type, address, pvzCode);
    const container = tariffContainer;
    if(container) {
        container.innerHTML = '<p style="text-align:center; padding: 20px;">–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.</p>';
        showTariffs();
    }
}