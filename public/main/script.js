// === MAIN/SCRIPT.JS - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–ï–ú–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ===
// –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–π –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–µ clip & go —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é

console.log('[PremiumMain] üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');

// ==== –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ ====
const PREMIUM_CONFIG = {
  animations: {
    slideUpDuration: 800,
    slideUpEasing: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
    elasticEasing: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',
    smoothEasing: 'ease-in-out',
    hapticDuration: 200,
    shimmerDuration: 600,
    countUpDuration: 2000
  },
  slider: {
    autoSlideInterval: 6000,
    transitionDuration: 700
  },
  glassmorphism: {
    blurIntensity: 20,
    borderOpacity: 0.2,
    backgroundOpacity: 0.12
  }
};

// ==== –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====
let premiumState = {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
  cameraCount: 0,
  memoryCount: 0,
  selectedMemory: '8gb',
  selectedColor: 'black',

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  currentTab: 'product',
  currentSlide: 0,
  slidesCount: 5,
  slideInterval: null,
  managersReady: false,
  pageInitialized: false,

  // –¶–µ–Ω—ã
  basePrice: 7490,
  memoryPrice: 500
};

// ==== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï DOM –≠–õ–ï–ú–ï–ù–¢–û–í ====
const DOM = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  mainContent: () => document.getElementById('mainContent'),

  // –¢–∞–±—ã
  tabBtns: () => document.querySelectorAll('.tab-btn'),
  tabContents: () => document.querySelectorAll('.tab-content'),
  productTab: () => document.getElementById('productTab'),
  infoTab: () => document.getElementById('infoTab'),

  // –°–ª–∞–π–¥–µ—Ä
  slides: () => document.querySelectorAll('.slider-img'),
  dots: () => document.querySelectorAll('.dot'),

  // –ü–æ–∫—É–ø–∫–∞
  colorOptions: () => document.querySelectorAll('.color-option-btn'),
  memoryOptions: () => document.querySelectorAll('.memory-option-btn'),
  priceDisplay: () => document.getElementById('priceDisplay'),
  addToCartBtn: () => document.getElementById('addToCartBtn'),

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  charContainer: () => document.getElementById('charTableContainer'),
  faqContainer: () => document.getElementById('faqContainer'),
  shippingContainer: () => document.getElementById('shippingContainer'),

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  cookieBanner: () => document.querySelector('.cookie-banner'),
  acceptCookiesBtn: () => document.getElementById('accept-cookies')
};

// ==== –û–ñ–ò–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–û–í ====
async function waitForPremiumManagers() {
  return new Promise((resolve) => {
    let attempts = 0;
    const maxAttempts = 30; // 3 —Å–µ–∫—É–Ω–¥—ã –º–∞–∫—Å–∏–º—É–º

    const checkManagers = () => {
      attempts++;

      if (window.CartManager && window.OrderManager) {
        console.log('[PremiumMain] ‚ú® –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        premiumState.managersReady = true;
        resolve(true);
      } else if (attempts >= maxAttempts) {
        console.warn('[PremiumMain] ‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö');
        resolve(false);
      } else {
        setTimeout(checkManagers, 100);
      }
    };

    checkManagers();
  });
}

// ==== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –û–®–ò–ë–û–ö ====
function showErrorNotification(message) {
  const notification = document.createElement('div');
  notification.className = 'premium-notification error-notification';
  notification.style.cssText = `
    position: fixed;
    top: 80px;
    right: 20px;
    left: 20px;
    max-width: 400px;
    margin: 0 auto;
    background: rgba(239, 68, 68, 0.95);
    backdrop-filter: blur(15px);
    -webkit-backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    padding: 16px;
    color: white;
    font-size: 0.9em;
    z-index: 100000;
    box-shadow: 0 10px 30px rgba(239, 68, 68, 0.3);
    animation: notificationSlideIn 0.4s ease;
    transform: translateZ(0);
  `;
  
  notification.innerHTML = `
    <div style="display: flex; align-items: center; gap: 12px;">
      <span style="font-size: 1.4em;">‚ö†Ô∏è</span>
      <div>
        <div style="font-weight: 600; margin-bottom: 4px;">–û—à–∏–±–∫–∞</div>
        <div style="font-size: 0.85em; opacity: 0.9;">${message}</div>
      </div>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.style.animation = 'notificationSlideOut 0.4s ease';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 400);
  }, 4000);
}

// ==== –°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ö–û–†–ó–ò–ù–´ ====
function savePremiumCartState() {
  try {
    const cartColor = premiumState.selectedColor;
    const memoryCard = premiumState.selectedMemory;
    const basePrice = premiumState.basePrice;
    const memoryPrice = memoryCard === '64gb' ? premiumState.memoryPrice : 0;
    const finalPrice = basePrice + memoryPrice;
    
    const cartColorRus = cartColor === 'black' ? '—á—ë—Ä–Ω—ã–π' : '–±–µ–ª—ã–π';
    const memoryDesc = memoryCard === '8gb' ? '8 –ì–ë (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è)' : '64 –ì–ë microSD';
    const productDescription = `clip & go 1st edition (${cartColorRus}, ${memoryDesc})`;
    
    if (window.CartManager && typeof window.CartManager.addToCart === 'function') {
      // Enhanced CartManager integration with proper data structure
      const productData = {
        id: `clip-go-${Date.now()}`,
        name: 'clip & go 1st edition',
        price: finalPrice,
        color: cartColor,
        colorRus: cartColorRus,
        memory: memoryCard,
        memoryDesc: memoryDesc,
        description: productDescription,
        quantity: 1,
        image: '../assets/images/cam1.jpg',
        category: 'camera',
        sku: `CLIP-GO-${cartColor.toUpperCase()}-${memoryCard.toUpperCase()}`
      };
      
      console.log('[PremiumMain] üì¶ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ CartManager:', productData);
      const success = window.CartManager.addToCart(productData);
      
      if (success) {
        console.log('[PremiumMain] ‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ CartManager');
        return true;
      } else {
        console.warn('[PremiumMain] ‚ö†Ô∏è CartManager –≤–µ—Ä–Ω—É–ª false, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        throw new Error('CartManager failed');
      }
    } else {
      console.log('[PremiumMain] üì¶ CartManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage fallback');
      throw new Error('CartManager not available');
    }
  } catch (error) {
    console.warn('[PremiumMain] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å CartManager, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage fallback:', error);
    
    try {
      // Comprehensive localStorage fallback
      const cartColor = premiumState.selectedColor;
      const memoryCard = premiumState.selectedMemory;
      const basePrice = premiumState.basePrice;
      const memoryPrice = memoryCard === '64gb' ? premiumState.memoryPrice : 0;
      const finalPrice = basePrice + memoryPrice;
      
      const cartColorRus = cartColor === 'black' ? '—á—ë—Ä–Ω—ã–π' : '–±–µ–ª—ã–π';
      const memoryDesc = memoryCard === '8gb' ? '8 –ì–ë (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è)' : '64 –ì–ë microSD';
      
      const existingCart = JSON.parse(localStorage.getItem('cartItems') || '[]');
      
      const newItem = {
        id: `clip-go-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        name: 'clip & go 1st edition',
        price: finalPrice,
        color: cartColor,
        colorRus: cartColorRus,
        memory: memoryCard,
        memoryDesc: memoryDesc,
        description: `clip & go 1st edition (${cartColorRus}, ${memoryDesc})`,
        quantity: 1,
        image: '../assets/images/cam1.jpg',
        addedAt: new Date().toISOString(),
        category: 'camera',
        sku: `CLIP-GO-${cartColor.toUpperCase()}-${memoryCard.toUpperCase()}`
      };
      
      existingCart.push(newItem);
      localStorage.setItem('cartItems', JSON.stringify(existingCart));
      
      // Update cart counter if exists
      const cartCounter = document.querySelector('.cart-counter');
      if (cartCounter) {
        cartCounter.textContent = existingCart.length;
        cartCounter.style.display = existingCart.length > 0 ? 'flex' : 'none';
      }
      
      console.log('[PremiumMain] ‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ localStorage fallback');
      console.log('[PremiumMain] üì¶ –¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞:', existingCart);
      
      return true;
    } catch (fallbackError) {
      console.error('[PremiumMain] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', fallbackError);
      showErrorNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return false;
    }
  }
}

// ==== –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò ====
class PremiumAnimations {
  static slideUp(elements, delay = 0) {
    if (!elements || elements.length === 0) return;

    elements.forEach((element, index) => {
      if (!element) return;

      setTimeout(() => {
        element.style.opacity = '1';
        element.style.transform = 'translateY(0)';
      }, delay + (index * 100));
    });
  }

  static hapticFeedback(element) {
    if (!element) return;

    element.style.transform = 'scale(0.98)';
    setTimeout(() => {
      element.style.transform = 'scale(1)';
    }, 150);
  }

  static countUp(element, target, duration = 1000) {
    if (!element || isNaN(target)) return;

    const start = parseInt(element.textContent) || 0;
    const increment = (target - start) / (duration / 50);
    let current = start;

    const timer = setInterval(() => {
      current += increment;

      if ((increment > 0 && current >= target) || (increment < 0 && current <= target)) {
        current = target;
        clearInterval(timer);
      }

      element.textContent = Math.floor(current);
    }, 50);
  }
}

// ==== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú –ö–û–†–ó–ò–ù–´ ====
function loadPremiumCartState() {
  try {
    if (window.CartManager) {
      const data = window.CartManager.getCartData();
      premiumState.cameraCount = data.cameraCount || 0;
      premiumState.memoryCount = data.memoryCount || 0;
      console.log('[PremiumMain] üõí –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', {
        cameraCount: premiumState.cameraCount,
        memoryCount: premiumState.memoryCount
      });
    } else {
      // Fallback –Ω–∞ localStorage
      const data = JSON.parse(localStorage.getItem('cartData') || '{}');
      premiumState.cameraCount = data.cameraCount || 0;
      premiumState.memoryCount = data.memoryCount || 0;
    }

    updatePremiumStats();
  } catch (error) {
    console.error('[PremiumMain] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
    premiumState.cameraCount = 0;
    premiumState.memoryCount = 0;
    premiumState.cartItems = 0;
  }
}


// ==== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ====
function updatePremiumStats() {
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è, —Ç–∞–∫ –∫–∞–∫ —É–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ hero
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ö–µ–¥–µ—Ä–µ
  if (window.CartManager && typeof window.CartManager.forceUpdateCounter === 'function') {
    window.CartManager.forceUpdateCounter();
  }
}

// ==== –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¶–ï–ù–´ ====
function updatePremiumPriceDisplay() {
  const priceDisplay = DOM.priceDisplay();
  if (!priceDisplay) return;

  const memoryPrice = premiumState.selectedMemory === '64gb' ? premiumState.memoryPrice : 0;
  const unit = premiumState.basePrice + memoryPrice;

  priceDisplay.innerHTML = `
    <div style="color: rgba(255, 255, 255, 0.9); margin-bottom: 8px;">–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</div>
    <strong>${unit.toLocaleString('ru-RU')} ‚ÇΩ</strong>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–µ—Å–∫ –∫ —Ü–µ–Ω–µ
  priceDisplay.style.animation = 'countUp 0.5s ease';
  setTimeout(() => {
    priceDisplay.style.animation = '';
  }, 500);
}

// ==== –ü–†–ï–ú–ò–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ê–ë–û–í ====
class PremiumTabSystem {
  static init() {
    const tabBtns = DOM.tabBtns();
    const tabContents = DOM.tabContents();

    tabBtns.forEach(btn => {
      btn.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));
    });

    console.log('[PremiumMain] üìÇ –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–±–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  static switchTab(targetTab) {
    const tabBtns = DOM.tabBtns();
    const tabContents = DOM.tabContents();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    premiumState.currentTab = targetTab;

    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    tabBtns.forEach(btn => {
      btn.classList.remove('active');
      if (btn.dataset.tab === targetTab) {
        btn.classList.add('active');
        PremiumAnimations.hapticFeedback(btn);
      }
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    tabContents.forEach(content => {
      if (content.id === `${targetTab}Content`) {
        content.style.display = 'none';
        setTimeout(() => {
          content.style.display = 'block';
          content.style.animation = 'premiumSlideUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        }, 150);
        content.classList.add('active');
      } else {
        content.classList.remove('active');
        content.style.display = 'none';
      }
    });

    console.log(`[PremiumMain] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ç–∞–±: ${targetTab}`);
  }
}

// ==== –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ô –°–õ–ê–ô–î–ï–† ====
class PremiumSlider {
  static init() {
    const slides = DOM.slides();
    console.log('[PremiumMain] üéûÔ∏è –ù–∞–π–¥–µ–Ω–æ —Å–ª–∞–π–¥–æ–≤:', slides.length);
    if (slides.length === 0) return;

    this.showSlide(0);
    this.updateDots();
    this.startAutoSlider();

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    window.prevSlide = () => this.prevSlide();
    window.nextSlide = () => this.nextSlide();
    window.currentSlide = (n) => this.goToSlide(parseInt(n) - 1);

    console.log('[PremiumMain] üéûÔ∏è –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  static showSlide(index) {
    const slides = DOM.slides();

    slides.forEach((slide, i) => {
      slide.classList.toggle('active', i === index);
      if (i === index) {
        slide.style.animation = 'slideIn 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
      }
    });

    premiumState.currentSlide = index;
    this.updateDots();
  }

  static updateDots() {
    const dots = DOM.dots();
    dots.forEach((dot, i) => {
      dot.classList.toggle('active', i === premiumState.currentSlide);
    });
  }

  static prevSlide() {
    const newIndex = (premiumState.currentSlide - 1 + premiumState.slidesCount) % premiumState.slidesCount;
    this.showSlide(newIndex);
    this.resetAutoSlider();
  }

  static nextSlide() {
    const newIndex = (premiumState.currentSlide + 1) % premiumState.slidesCount;
    this.showSlide(newIndex);
    this.resetAutoSlider();
  }

  static goToSlide(index) {
    this.showSlide(index);
    this.resetAutoSlider();
  }

  static startAutoSlider() {
    if (premiumState.slidesCount > 1) {
      premiumState.slideInterval = setInterval(() => {
        this.nextSlide();
      }, PREMIUM_CONFIG.slider.autoSlideInterval);
    }
  }

  static resetAutoSlider() {
    if (premiumState.slideInterval) {
      clearInterval(premiumState.slideInterval);
    }
    this.startAutoSlider();
  }
}

// ==== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–ê–†–¢–û–ß–ö–ò ====
class PremiumInfoCards {
  static init() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ HTML
    window.toggleCharacteristics = () => this.toggleCard('charTableContainer');
    window.toggleFAQ = () => this.toggleCard('faqContainer');
    window.toggleShipping = () => this.toggleCard('shippingContainer');

    console.log('[PremiumMain] üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  static toggleCard(targetId) {
    const containers = ['charTableContainer', 'faqContainer', 'shippingContainer'];

    containers.forEach(id => {
      const content = document.getElementById(id);
      const header = content?.closest('.info-card')?.querySelector('.info-card-header');

      if (!content || !header) return;

      const isCurrentlyOpen = content.classList.contains('open');
      const shouldOpen = (id === targetId) && !isCurrentlyOpen;

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      content.classList.remove('open');
      header.classList.remove('opened');

      if (shouldOpen) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
          content.classList.add('open');
          header.classList.add('opened');
          content.style.animation = 'premiumSlideUp 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        }, 100);
      }
    });
  }
}

// ==== –°–ò–°–¢–ï–ú–ê –ü–û–ö–£–ü–û–ö ====
class PremiumPurchaseSystem {
  static init() {
    console.log('[PremiumMain] üõí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—É–ø–æ–∫...');
    try {
      this.setupColorOptions();
      this.setupMemoryOptions();
      this.setupAddToCartButton();
      updatePremiumPriceDisplay();
      console.log('[PremiumMain] ‚úÖ –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫—É–ø–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('[PremiumMain] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—É–ø–æ–∫:', error);
    }
  }

  static setupColorOptions() {
    const colorOptions = DOM.colorOptions();
    console.log('[PremiumMain] üé® –ù–∞–π–¥–µ–Ω–æ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫:', colorOptions.length);

    colorOptions.forEach(btn => {
      btn.addEventListener('click', () => {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        colorOptions.forEach(b => b.classList.remove('selected'));

        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        btn.classList.add('selected');
        premiumState.selectedColor = btn.dataset.color;

        // –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        PremiumAnimations.hapticFeedback(btn);

        updatePremiumPriceDisplay();
        console.log(`[PremiumMain] üé® –í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: ${premiumState.selectedColor}`);
      });
    });
  }

  static setupMemoryOptions() {
    const memoryOptions = DOM.memoryOptions();
    console.log('[PremiumMain] üíæ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –ø–∞–º—è—Ç–∏:', memoryOptions.length);

    memoryOptions.forEach(btn => {
      btn.addEventListener('click', () => {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        memoryOptions.forEach(b => b.classList.remove('selected'));

        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        btn.classList.add('selected');
        premiumState.selectedMemory = btn.dataset.memory;

        // –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        PremiumAnimations.hapticFeedback(btn);

        updatePremiumPriceDisplay();
        console.log(`[PremiumMain] üíæ –ü–∞–º—è—Ç—å: ${premiumState.selectedMemory}`);
      });
    });
  }

  static setupAddToCartButton() {
    const addBtn = DOM.addToCartBtn();
    console.log('[PremiumMain] üõí –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–π–¥–µ–Ω–∞:', !!addBtn);
    if (!addBtn) return;

    addBtn.addEventListener('click', (e) => {
      e.preventDefault();
      this.addToCart();
    });
  }

  static addToCart() {
    console.log('[PremiumMain] üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–µ–º–∏–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É...');

    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    const addBtn = DOM.addToCartBtn();
    PremiumAnimations.hapticFeedback(addBtn);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    const addResult = savePremiumCartState();

    if (addResult) {
      console.log('[PremiumMain] ‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      updatePremiumPriceDisplay();
      updatePremiumStats();

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CartManager
      setTimeout(() => {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        let currentCartCount = 1;
        if (window.CartManager && typeof window.CartManager.getTotalCount === 'function') {
          currentCartCount = window.CartManager.getTotalCount();
        } else {
          // Fallback –¥–ª—è localStorage
          try {
            const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');
            currentCartCount = cartItems.length;
          } catch (e) {
            currentCartCount = 1;
          }
        }
        
        // –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        this.showPremiumNotification(currentCartCount);
        this.createPremiumFlyingAnimation();
      }, 150);
    } else {
      console.error('[PremiumMain] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      this.showErrorNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    if (window.CartManager && typeof window.CartManager.forceUpdateCounter === 'function') {
      setTimeout(() => {
        window.CartManager.forceUpdateCounter();
      }, 100);
    }

    console.log('[PremiumMain] ‚ú® –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–º–∏–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É');
  }

  static showPremiumNotification(totalItems) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const existing = document.querySelector('.premium-notification');
    if (existing) existing.remove();

    const notification = document.createElement('div');
    notification.className = 'premium-notification';
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–∞–º—è—Ç–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const hasMemoryCard = premiumState.selectedMemory === '64gb';
    const memoryDesc = hasMemoryCard ? '64 –ì–ë' : '8 –ì–ë';
    const colorName = premiumState.selectedColor === 'black' ? '–ß—ë—Ä–Ω—ã–π' : '–ë–µ–ª—ã–π';
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    let currentCartCount = totalItems || 1;
    if (window.CartManager && typeof window.CartManager.getTotalCount === 'function') {
      currentCartCount = window.CartManager.getTotalCount();
    } else {
      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
      try {
        const cartData = JSON.parse(localStorage.getItem('cartItems') || '[]');
        currentCartCount = cartData.length || 1;
      } catch (e) {
        console.warn('[PremiumMain] Fallback cart count failed:', e);
        currentCartCount = totalItems || 1;
      }
    }

    notification.innerHTML = `
      <div class="notification-content" style="display: flex; align-items: center; gap: 15px;">
        <span class="notification-icon" style="font-size: 2em;">üõí</span>
        <div>
          <div class="notification-title" style="font-weight: 800; margin-bottom: 6px; color: #1ca6f8;">–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!</div>
          <div class="notification-text" style="font-size: 0.9em; opacity: 0.9;">clip & go 1st edition</div>
          <div class="notification-text" style="font-size: 0.85em; opacity: 0.8; margin-top: 2px;">${colorName}, ${memoryDesc}</div>
          ${hasMemoryCard ? '<div class="notification-text" style="font-size: 0.8em; opacity: 0.7; margin-top: 2px;">+ –ö–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ 64 –ì–ë</div>' : ''}
          <div class="notification-text" style="font-size: 0.8em; opacity: 0.7; margin-top: 4px; color: #1ca6f8;">–í –∫–æ—Ä–∑–∏–Ω–µ: ${currentCartCount} ${this.getItemWord(currentCartCount)}</div>
        </div>
      </div>
    `;

    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      notification.style.transform = 'translateX(0)';
    }, 100);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
      notification.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 600);
    }, 4000);
  }

  static getItemWord(count) {
    const cases = [2, 0, 1, 1, 1, 2];
    const titles = ['—Ç–æ–≤–∞—Ä', '—Ç–æ–≤–∞—Ä–∞', '—Ç–æ–≤–∞—Ä–æ–≤'];
    return titles[(count % 100 > 4 && count % 100 < 20) ? 2 : cases[Math.min(count % 10, 5)]];
  }

  static createPremiumFlyingAnimation() {
    const activeSlide = document.querySelector('.slider-img.active');
    if (!activeSlide) return;

    const hasMemoryCard = premiumState.selectedMemory === '64gb';

    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–º–µ—Ä—ã
    this.createFlyingItem(activeSlide.src, 'camera');

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ 64–ì–ë, –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –ø–∞–º—è—Ç–∏
    if (hasMemoryCard) {
      setTimeout(() => {
        this.createFlyingItem('../assets/images/memory-card.png', 'memory');
      }, 300);
    }
  }

  static createFlyingItem(imageSrc, type) {
    const activeSlide = document.querySelector('.slider-img.active');
    if (!activeSlide) return;

    const flyingImg = document.createElement('div');
    const size = type === 'memory' ? 60 : 100;
    
    flyingImg.style.cssText = `
      position: fixed;
      width: ${size}px;
      height: ${size}px;
      background-image: url(${imageSrc});
      background-size: cover;
      background-position: center;
      z-index: 10000;
      pointer-events: none;
      border-radius: ${type === 'memory' ? '8px' : '16px'};
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
      border: 2px solid rgba(255, 255, 255, 0.3);
      backdrop-filter: blur(5px);
      -webkit-backdrop-filter: blur(5px);
    `;

    const rect = activeSlide.getBoundingClientRect();
    const offsetX = type === 'memory' ? 30 : 0;
    const startX = rect.left + rect.width / 2 - size/2 + offsetX;
    const startY = rect.top + rect.height / 2 - size/2;

    flyingImg.style.left = `${startX}px`;
    flyingImg.style.top = `${startY}px`;

    document.body.appendChild(flyingImg);

    // –ò—â–µ–º —Ü–µ–ª—å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const cartIcon = document.querySelector('.cart-icon, .header-actions .cart-btn, [href*="cart"]');

    if (cartIcon) {
      const cartRect = cartIcon.getBoundingClientRect();
      const endX = cartRect.left + cartRect.width / 2 - size/2;
      const endY = cartRect.top + cartRect.height / 2 - size/2;

      const animation = flyingImg.animate([
        {
          transform: 'translate(0, 0) scale(1) rotate(0deg)',
          opacity: 1
        },
        {
          transform: `translate(${endX - startX}px, ${endY - startY}px) scale(0.3) rotate(${type === 'memory' ? '180deg' : '360deg'})`,
          opacity: 0
        }
      ], {
        duration: type === 'memory' ? 1200 : 1500,
        easing: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)'
      });

      animation.onfinish = () => {
        flyingImg.remove();

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (cartIcon && (!hasMemoryCard || type === 'memory')) {
          cartIcon.style.animation = 'cartBounce 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
          setTimeout(() => {
            cartIcon.style.animation = '';
          }, 800);
        }
      };
    } else {
      setTimeout(() => flyingImg.remove(), 1500);
    }
  }
}

// ==== –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ô COOKIE BANNER ====
class PremiumCookieBanner {
  static init() {
    const banner = DOM.cookieBanner();
    const acceptBtn = DOM.acceptCookiesBtn();

    if (!banner || !acceptBtn) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è—Ç—ã –ª–∏ —É–∂–µ cookies
    if (localStorage.getItem('cookiesAccepted')) {
      banner.style.display = 'none';
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    let bannerShown = false;

    function onScroll() {
      if (bannerShown) return;

      const purchaseSection = document.querySelector('.premium-purchase-section');
      if (!purchaseSection) return;

      const rect = purchaseSection.getBoundingClientRect();
      if (rect.top < window.innerHeight && rect.bottom > 0) {
        banner.style.display = 'flex';
        banner.style.animation = 'premiumSlideUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        bannerShown = true;
        window.removeEventListener('scroll', onScroll);
      }
    }

    window.addEventListener('scroll', onScroll, { passive: true });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è cookies
    acceptBtn.addEventListener('click', () => {
      localStorage.setItem('cookiesAccepted', 'true');
      banner.style.animation = 'premiumFadeOut 0.4s ease-out forwards';
      setTimeout(() => {
        banner.style.display = 'none';
      }, 400);
    });

    console.log('[PremiumMain] üç™ –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π cookie banner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
}

// ==== –°–û–ë–´–¢–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í ====
function setupPremiumManagerEvents() {
  // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
  window.addEventListener('cartUpdated', (e) => {
    console.log('[PremiumMain] üîÑ –°–æ–±—ã—Ç–∏–µ cartUpdated –ø–æ–ª—É—á–µ–Ω–æ:', e.detail);
    loadPremiumCartState();
    updatePremiumPriceDisplay();
  });

  // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
  window.addEventListener('ordersUpdated', (e) => {
    console.log('[PremiumMain] üì¶ –°–æ–±—ã—Ç–∏–µ ordersUpdated –ø–æ–ª—É—á–µ–Ω–æ:', e.detail);

    if (e.detail.action === 'added' && e.detail.order) {
      showPremiumOrderNotification(e.detail.order);
    }
  });

  console.log('[PremiumMain] üéß –°–æ–±—ã—Ç–∏—è –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

function showPremiumOrderNotification(order) {
  const notification = document.createElement('div');
  notification.className = 'premium-notification order-notification';

  notification.innerHTML = `
    <div class="notification-content" style="display: flex; align-items: center; gap: 18px;">
      <span class="notification-icon" style="font-size: 2.5em;">üéâ</span>
      <div>
        <div class="notification-title" style="font-weight: 800; margin-bottom: 8px; color: #10b981; font-size: 1.1em;">–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</div>
        <div class="notification-text" style="font-size: 0.95em; opacity: 0.9; margin-bottom: 4px;">‚Ññ ${order.id}</div>
        <div class="notification-text" style="font-size: 0.9em; opacity: 0.8;">–°—É–º–º–∞: ${order.amount?.toLocaleString('ru-RU')} ‚ÇΩ</div>
        <div class="notification-text" style="font-size: 0.8em; opacity: 0.7; margin-top: 6px;">–ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ‚ú®</div>
      </div>
    </div>
  `;

  document.body.appendChild(notification);

  setTimeout(() => {
    notification.style.transform = 'translateX(0)';
  }, 100);

  setTimeout(() => {
    notification.style.transform = 'translateX(100%)';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 600);
  }, 5000);
}

// ==== –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ï CSS –ê–ù–ò–ú–ê–¶–ò–ò ====
function addPremiumAnimationStyles() {
  if (document.getElementById('premium-main-animations')) return;

  const style = document.createElement('style');
  style.id = 'premium-main-animations';
  style.textContent = `
    @keyframes premiumSlideUp {
      0% { opacity: 0; transform: translateY(30px); }
      100% { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes premiumFadeOut {
      0% { opacity: 1; transform: translateY(0); }
      100% { opacity: 0; transform: translateY(-10px); }
    }
    
    @keyframes premiumHaptic {
      0% { transform: scale(1); }
      50% { transform: scale(0.98); }
      100% { transform: scale(1); }
    }
    
    @keyframes slideIn {
      0% { opacity: 0; transform: scale(0.95); }
      100% { opacity: 1; transform: scale(1); }
    }
    
    @keyframes shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    
    @keyframes float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-20px) rotate(180deg); }
    }
    
    @keyframes avatarPulse {
      0% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.3); }
      70% { box-shadow: 0 0 0 20px rgba(255, 255, 255, 0); }
      100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0); }
    }
    
    @keyframes countUp {
      0% { transform: translateY(20px); opacity: 0; }
      100% { transform: translateY(0); opacity: 1; }
    }
    
    @keyframes cartBounce {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.2); }
    }
  `;

  document.head.appendChild(style);
}


// ==== INTERSECTION OBSERVER –î–õ–Ø –õ–ï–ù–ò–í–´–• –ê–ù–ò–ú–ê–¶–ò–ô ====
class LazyAnimationObserver {
  constructor() {
    this.observer = null;
    this.init();
  }

  init() {
    if ('IntersectionObserver' in window) {
      this.observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('visible');
              this.observer.unobserve(entry.target);
            }
          });
        },
        {
          threshold: 0.1,
          rootMargin: '50px'
        }
      );

      this.observeElements();
    } else {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      this.fallbackAnimation();
    }
  }

  observeElements() {
    const elements = document.querySelectorAll('.fade-in-on-scroll');
    elements.forEach(el => {
      this.observer.observe(el);
    });
  }

  fallbackAnimation() {
    const elements = document.querySelectorAll('.fade-in-on-scroll');
    elements.forEach(el => {
      el.classList.add('visible');
    });
  }
}

// ==== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ====
async function initPremiumMainPage() {
  try {
    console.log('[PremiumMain] üöÄ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ü–†–ï–ú–ò–ê–õ–¨–ù–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê ===');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å –≤ DOM
    const mainContent = document.getElementById('mainContent');
    const colorBtns = document.querySelectorAll('.color-option-btn');
    const memoryBtns = document.querySelectorAll('.memory-option-btn');
    const addToCartBtn = document.getElementById('addToCartBtn');
    
    console.log('[PremiumMain] üîç DOM check:', {
      mainContent: !!mainContent,
      colorBtns: colorBtns.length,
      memoryBtns: memoryBtns.length,
      addToCartBtn: !!addToCartBtn
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–π
    addPremiumAnimationStyles();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    loadPremiumCartState();
    updatePremiumPriceDisplay();
    updatePremiumStats();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    console.log('[PremiumMain] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...');
    PremiumTabSystem.init();
    PremiumSlider.init();
    PremiumInfoCards.init();
    PremiumPurchaseSystem.init();
    PremiumCookieBanner.init();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Intersection Observer –¥–ª—è –ª–µ–Ω–∏–≤—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    const lazyAnimations = new LazyAnimationObserver();

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    const managersPromise = waitForPremiumManagers().then(managersLoaded => {
      if (managersLoaded) {
        console.log('[PremiumMain] ‚ú® –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        setupPremiumManagerEvents();

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        if (window.CartManager && typeof window.CartManager.forceUpdateCounter === 'function') {
          setTimeout(() => {
            window.CartManager.forceUpdateCounter();
            console.log('[PremiumMain] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã');
          }, 300);
        }
      }
    });

    // –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∏ –≤–∏–¥–∏–º
    if (mainContent) {
      mainContent.style.opacity = '1';
      mainContent.style.transform = 'translateY(0)';
    }

    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
    premiumState.pageInitialized = true;

    console.log('[PremiumMain] üéâ === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–†–ï–ú–ò–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù ===');

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    await managersPromise;

  } catch (error) {
    console.error('[PremiumMain] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);

    // Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    const mainContent = DOM.mainContent();
    if (mainContent) {
      mainContent.style.opacity = '1';
    }

    loadPremiumCartState();
    updatePremiumPriceDisplay();
    PremiumTabSystem.init();
    PremiumSlider.init();
    PremiumInfoCards.init();
    PremiumPurchaseSystem.init();

    console.log('[PremiumMain] ‚ö†Ô∏è Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  }
}

// ==== –û–¢–õ–ê–î–û–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò ====
window.debugPremiumMain = function() {
  console.log('=== DEBUG PREMIUM MAIN PAGE ===');
  console.log('–ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    pageInitialized: premiumState.pageInitialized,
    managersReady: premiumState.managersReady,
    currentTab: premiumState.currentTab,
    currentSlide: premiumState.currentSlide,
    cameraCount: premiumState.cameraCount,
    memoryCount: premiumState.memoryCount,
    selectedColor: premiumState.selectedColor,
    selectedMemory: premiumState.selectedMemory
  });

  if (window.CartManager) {
    console.log('CartManager –¥–∞–Ω–Ω—ã–µ:', window.CartManager.getCartData());
    console.log('CartManager —Å—á–µ—Ç—á–∏–∫:', window.CartManager.getTotalCount());
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ hero —Å–µ–∫—Ü–∏–∏
  const heroGif = document.querySelector('.hero-gif');
  if (heroGif) {
    const rect = heroGif.getBoundingClientRect();
    console.log('Hero –≥–∏—Ñ–∫–∞:', {
      width: rect.width,
      height: rect.height,
      top: rect.top,
      visible: rect.width > 0 && rect.height > 0,
      minHeight: window.getComputedStyle(heroGif).minHeight,
      isFullscreen: rect.height >= window.innerHeight * 0.9
    });
  } else {
    console.warn('Hero –≥–∏—Ñ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
};

window.testPremiumAddToCart = function() {
  console.log('=== TEST PREMIUM ADD TO CART ===');
  PremiumPurchaseSystem.addToCart();
};

window.testPremiumAnimations = function() {
  console.log('=== TEST PREMIUM ANIMATIONS ===');
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const priceDisplay = DOM.priceDisplay();
  if (priceDisplay) {
    priceDisplay.style.animation = 'countUp 0.5s ease';
  }
};

window.resetPremiumCart = function() {
  console.log('=== RESET PREMIUM CART ===');
  premiumState.cameraCount = 0;
  premiumState.memoryCount = 0;
  savePremiumCartState();
  updatePremiumPriceDisplay();
  if (window.CartManager) {
    window.CartManager.forceUpdateCounter();
  }
};

// ==== –ó–ê–ü–£–°–ö –ü–†–ï–ú–ò–ê–õ–¨–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ====
console.log('[PremiumMain] üìÑ Document state:', document.readyState);
if (document.readyState === 'loading') {
  console.log('[PremiumMain] ‚è≥ Waiting for DOMContentLoaded...');
  document.addEventListener('DOMContentLoaded', initPremiumMainPage);
} else {
  console.log('[PremiumMain] ‚úÖ DOM ready, starting initialization...');
  initPremiumMainPage();
}

console.log('[PremiumMain] üöÄ –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!');

// ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø HEADER MANAGER ====
function initHeaderManager() {
  let attempts = 0;
  const maxAttempts = 50;
  
  const checkHeader = () => {
    attempts++;
    
    if (window.headerManager && window.headerManager.isInitialized) {
      console.log('[Main] ‚úÖ HeaderManager –Ω–∞–π–¥–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      window.headerManager.forceUpdateBadges();
      return;
    }
    
    if (window.HeaderManager && !window.headerManager) {
      console.log('[Main] üîß –°–æ–∑–¥–∞–µ–º HeaderManager...');
      try {
        window.headerManager = new window.HeaderManager();
        if (window.headerManager.isInitialized) {
          console.log('[Main] ‚úÖ HeaderManager —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          window.headerManager.forceUpdateBadges();
          return;
        }
      } catch (error) {
        console.error('[Main] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HeaderManager:', error);
      }
    }
    
    if (attempts < maxAttempts) {
      setTimeout(checkHeader, 100);
    } else {
      console.warn('[Main] ‚ö†Ô∏è HeaderManager –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å');
    }
  };
  
  checkHeader();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é HeaderManager
setTimeout(initHeaderManager, 500);

